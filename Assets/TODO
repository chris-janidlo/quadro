FIXME:
turn based driver
sometimes get null pointer error when hitting close to the boundary of a beat and an empty beat (line numbers accurate as of time of committing this message)
	InvalidOperationException: Nullable object must have a value.
	System.Nullable`1[T].get_Value () (at <599589bf4ce248909b8a14cbe4a2034e>:0)
	PlayerState.DoNoteInput (NoteInput input) (at Assets/Scripts/game_state/PlayerState.cs:30)
	RealtimeDriver.Update () (at Assets/Scripts/drivers/RealtimeDriver.cs:41)

TODO:
convert all nullable casts to .Value calls

FAILURE MAKE PLAYERS DIE AND SHIT
IT AIN'T A GAME OTHERWISE

for future non-track spell targets: make ISpellTarget (or something similar) to mark classes that can be targeted

dial up music! figure out how dial up works and use that
	chilled out nostalgic chords seem to work well

reword game text for new hacker mentality
	spell -> command?
	card -> packet
	track -> network something something

charge system
	add a meter called the "charge" meter or something similar
		TODO: figure out lore (stores excess electricity?)
	every time you hit a beat successfully, the charge increases. the more accurate you are, the better the increase (might even make the least accurate hit-tier not add anything)
	every time you miss a beat or hit when you shouldn't, the charge decreases
	when the charge meter fills up, the current spell gets a bonus to the magnitude of its effectiveness, and the meter resets back to zero

make cast dependent on mana ?????
	get one mana per card clear
	mana of spell is based solely off main note

decide if we want to increase the number of notes to 8 per player

split card rng in two - main rng and garbage rng
	main rng is used on the regular every-few-beats spawns
	garbage is used whenever a player manually causes a card spawn (like tetris garbage)
	main and garbage have their own seeds so they don't cross contaminate
	seeds should be the same for every player in a multiplayer match

determine whether or not to simplify meta combos so that they no longer depend on the main note

better immediate feedback (failure/success per note)

change how we handle bpm difficulty: up the size of the inner Track difficulty increases, while notes/spells can manipulate bpm with about the same granularity they currently have
